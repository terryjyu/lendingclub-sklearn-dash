# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nJOlj9dTAvyomlqTIIVgBWry7KWD93kY
"""

from sklearn.linear_model import LogisticRegression
import joblib

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df=pd.read_csv('/content/lc_cleaned_combined.csv')

df.columns

x=df[[ 'loan_amnt', 'term',
       'grade',  'emp_length', 'home_ownership',
       'annual_inc',  'purpose', ]]

y=df.loan_status

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size =0.15,random_state=0)

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder

x_train[:5]

### label encode the categorical values and convert them to numbers 
le = LabelEncoder()
for i in ['term','grade','emp_length','home_ownership','purpose']: 
  le.fit(x_train[i].astype(str))
  x_train[i] = le.transform(x_train[i].astype(str))
  x_test[i] = le.transform(x_test[i].astype(str))

x_train

# sc=StandardScaler()
# x_train=sc.fit_transform(x_train)
# x_test=sc.fit_transform(x_test)

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=50, oob_score=True, random_state=123456)
rf.fit(x_train, y_train)

from sklearn.metrics import accuracy_score
y_pred=rf.predict(x_test)
accuracy_score(y_test,y_pred)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

from sklearn.metrics import accuracy_score
y_pred=lr.predict(x_test)
accuracy_score(y_test,y_pred)

#save rf model
joblib.dump(rf,"sklearn_rf-50trees.joblib",compress=3)

joblib.dump(lr,"sklearn_lr.joblib",compress=3)

prediction=rf.predict(x_test)

pd.DataFrame(prediction).value_counts()

userdf=pd.DataFrame(columns=[ 'loan_amnt', 'term',
       'int_rate', 'grade',  'emp_length', 'home_ownership',
       'annual_inc',  'purpose', ])

user_input=x.iloc[1,]

user_input

userdf=userdf.append(user_input)

userdf=pd.DataFrame.from_dict( {'loan_amnt': [1000], 'term':[0],
        'grade':[0],  'emp_length':[0], 'home_ownership':[0],
       'annual_inc':[1000],  'purpose':[0]} )

userdf

### label encode the categorical values and convert them to numbers 
le = LabelEncoder()

for i in ['term','grade','emp_length','home_ownership','purpose']: 
  le.fit(userdf[i].astype(str))
  userdf[i] = le.transform(userdf[i].astype(str))

rf.predict_proba(userdf)

rf.predict(userdf)

rf.predict_proba(userdf)[0][1]

from sklearn.metrics import accuracy_score
y_pred=rf.predict(x_test)
accuracy_score(y_test,y_pred)